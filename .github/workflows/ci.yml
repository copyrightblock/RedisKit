name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Start Redis
      run: |
        docker run -d --name redis -p 6379:6379 redis:7-alpine
        sleep 5
        docker exec redis redis-cli ping
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Run All Tests with Coverage
      run: |
        dotnet test --no-build --configuration Release \
          --verbosity normal \
          --logger trx \
          --results-directory "TestResults" \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat="lcov,cobertura" \
          /p:CoverletOutput=./coverage/ \
          /p:ExcludeByFile="**/bin/**,**/obj/**"
      env:
        REDIS_CONNECTION: localhost:6379
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Prepare Qodana coverage
      run: |
        mkdir -p .qodana/code-coverage
        cp ./coverage/coverage.info .qodana/code-coverage/
    
    - name: Run Qodana Code Quality
      uses: JetBrains/qodana-action@v2025.1
      with:
        pr-mode: false
      env:
        QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_634141825 }}
        QODANA_ENDPOINT: 'https://qodana.cloud'

  package:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Pack
      run: dotnet pack --no-build --configuration Release --output nupkgs
    
    - name: Upload NuGet packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: nupkgs/*.nupkg
    
    # Uncomment to publish to NuGet
    # - name: Publish to NuGet
    #   run: dotnet nuget push nupkgs/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  code-quality:
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the whole workflow
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Check formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
      continue-on-error: true
    
    - name: Run code analysis
      run: dotnet build -warnaserror
      continue-on-error: true