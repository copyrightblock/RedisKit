name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        configuration: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    # Setup Redis on Ubuntu
    - name: Setup Redis (Ubuntu)
      if: runner.os == 'Linux'
      uses: shogo82148/actions-setup-redis@v1
      with:
        redis-version: '7.x'
    
    # Setup Redis on Windows
    - name: Setup Redis (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Skipping Redis setup on Windows - Integration tests will be skipped"
      shell: powershell
    
    # Setup Redis on macOS
    - name: Setup Redis (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install redis
        brew services start redis
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration ${{ matrix.configuration }}
    
    - name: Run Unit Tests
      run: dotnet test --no-build --configuration ${{ matrix.configuration }} --filter "Category!=Integration" --verbosity normal --logger trx --results-directory "TestResults-${{ matrix.os }}-${{ matrix.configuration }}"
    
    - name: Run Integration Tests
      if: runner.os != 'Windows'  # Skip integration tests on Windows
      run: dotnet test --no-build --configuration ${{ matrix.configuration }} --filter "Category=Integration" --verbosity normal --logger trx --results-directory "TestResults-Integration-${{ matrix.os }}-${{ matrix.configuration }}"
      env:
        REDIS_CONNECTION: localhost:6379
      continue-on-error: true  # Don't fail if integration tests fail
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.configuration }}
        path: TestResults-${{ matrix.os }}-${{ matrix.configuration }}
    
    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.configuration == 'Release'
      run: |
        dotnet test --no-build --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./coverage/
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.configuration == 'Release'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  package:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Pack
      run: dotnet pack --no-build --configuration Release --output nupkgs
    
    - name: Upload NuGet packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: nupkgs/*.nupkg
    
    # Uncomment to publish to NuGet
    # - name: Publish to NuGet
    #   run: dotnet nuget push nupkgs/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  code-quality:
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the whole workflow
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Check formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
      continue-on-error: true
    
    - name: Run code analysis
      run: dotnet build -warnaserror
      continue-on-error: true